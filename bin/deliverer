#!/usr/bin/env php
<?php

ini_set("display_errors", "On");
error_reporting(E_ALL & ~E_DEPRECATED);

$deliverer = new Deliverer($argv);
$deliverer->monitor();

class Deliverer
{
    const WORK_SPACE = "/tmp/deliverer";

    private $logDir;
    private $processedLogDir;
    private $configDir;

    private $stat = "stat";

    /**
     * @var string
     */
    private $trace = null;

    /**
     * @var bool
     */
    private $traceRoute = false;

    /**
     * @var int
     */
    private $traceNum;

    /**
     * @var string
     */
    private $traceRequestId;

    /**
     * @var int
     */
    private $stackDepth = 5;

    public function __construct($argv)
    {
        $log = "ICAgLyQkJCQkJCQgICAgICAgICAgICAvJCQgLyQkCiAgfCAkJF9fICAkJCAgICAgICAgICB8ICQkfF9fLwogIHwgJCQgIFwgJCQgIC8kJCQkJCQgfCAkJCAvJCQgLyQkICAgIC8kJCAvJCQkJCQkICAgLyQkJCQkJCAgIC8kJCQkJCQgICAvJCQkJCQkCiAgfCAkJCAgfCAkJCAvJCRfXyAgJCR8ICQkfCAkJHwgICQkICAvJCQvLyQkX18gICQkIC8kJF9fICAkJCAvJCRfXyAgJCQgLyQkX18gICQkCiAgfCAkJCAgfCAkJHwgJCQkJCQkJCR8ICQkfCAkJCBcICAkJC8kJC98ICQkJCQkJCQkfCAkJCAgXF9fL3wgJCQkJCQkJCR8ICQkICBcX18vCiAgfCAkJCAgfCAkJHwgJCRfX19fXy98ICQkfCAkJCAgXCAgJCQkLyB8ICQkX19fX18vfCAkJCAgICAgIHwgJCRfX19fXy98ICQkCiAgfCAkJCQkJCQkL3wgICQkJCQkJCR8ICQkfCAkJCAgIFwgICQvICB8ICAkJCQkJCQkfCAkJCAgICAgIHwgICQkJCQkJCR8ICQkCiAgfF9fX19fX18vICBcX19fX19fXy98X18vfF9fLyAgICBcXy8gICAgXF9fX19fX18vfF9fLyAgICAgICBcX19fX19fXy98X18v";
        Logger::success("\n" . base64_decode($log) . "\n\n");

        $this->logDir          = self::WORK_SPACE . "/log/";
        $this->processedLogDir = self::WORK_SPACE . "/history/";
        $this->configDir       = self::WORK_SPACE . "/config/";

        $shortOpts = "t::l:n:v:r:ch";
        $longOpts  = ["trace::", "level:", "number:", "view:", "route:", "check", "help"];
        $options   = getopt($shortOpts, $longOpts);

        foreach ($options as $k => $v) {

            if ($k == "h" || $k == "help") {
                $this->help();
            }

            if ($k == "c" || $k == "check") {
                $envCheck = new EnvCheck();
                $envCheck->run();
                exit;
            }

            if ($k == "r" || $k == "route") {
                $this->traceRoute = true;
            }

            if ($k == "t" || $k == "trace") {
                $this->trace = $v;
            }

            if ($k == "n" || $k == "number") {
                $this->traceNum = (int)$v;
            }

            if ($k == "l" || $k == "level") {
                $this->stackDepth = (int)$v;
            }

            if ($k == "v" || $k == "view") {
                $this->traceRequestId = $v;
                $this->stackDepth     = $this->stackDepth > 50 ? $this->stackDepth : 50;
            }
        }

        if ($this->trace === null && $this->traceRequestId == null) {
            $this->help();
        }

        $this->start();
    }

    public function __destruct()
    {
        $this->stop();
    }

    private function start()
    {
        $this->initDir($this->configDir);
        $this->initDir($this->logDir);
        $this->initDir($this->processedLogDir);

        $file = $this->configDir . $this->stat;

        if (file_exists($file)) {
            Logger::warning("monitor pid:[" . file_get_contents($file) . "] is running.");
            exit;
        }

        file_put_contents($file, getmypid());

        $this->setSignalHandler();
    }

    private function initDir($dir)
    {
        if (!file_exists($dir)) {
            mkdir($dir, 0777, true); // 默认的umask为022，与 777 & 运算之后，就变成了 755
            chmod($dir, 0777);
        }
    }

    private function setSignalHandler()
    {
        if (!function_exists("pcntl_signal")) {
            $this->cleanLog();
            return;
        }

        declare(ticks=1);
        pcntl_signal(SIGINT, function () {
            exit;
        });
    }

    private function cleanLog()
    {
        if (file_exists($this->logDir)) {
            foreach (new DirectoryIterator($this->logDir) as $fileInfo) {
                if ($fileInfo->isDot()) continue;
                $this->mvLog($fileInfo->getFilename());
            }
        }
    }

    public function stop()
    {
        $stat = $this->configDir . $this->stat;

        if (file_exists($stat)) {
            unlink($stat);
        }

        $this->cleanLog();
    }

    private function help()
    {
        echo "Usage: deliverer [OPTION]...
  -h,  --help                      print this help
  -c,  --check                     check php env
  -r,  --route                     trace filter by http url route
  -t,  --trace                     trace function or method, default value is all user function
  -l,  --level                     trace function stack depth, default value is 5
  -v,  --view                      view stack full info
  -n,  --number                    execution times and exit
  
more info : https://mengkang.net/1473.html\n\n";
        exit;
    }

    public function monitor()
    {
        if ($this->traceRequestId) {
            $this->read($this->processedLogDir . $this->traceRequestId . ".log");
            return;
        }

        $traceNum = 0;

        while (true) {
            foreach (new DirectoryIterator($this->logDir) as $fileInfo) {
                if ($fileInfo->isDot()) continue;

                $file = $fileInfo->getPath() . "/" . $fileInfo->getFilename();

                if (!$this->requestIsEnd($file)) continue;

                $matched = $this->read($file);

                if ($matched) $traceNum++;

                $this->mvLog($fileInfo->getFilename());

                if ($this->traceNum > 0 && $traceNum >= $this->traceNum) {
                    exit;
                }
            }

            usleep(100000);
        }
    }

    public function requestIsEnd($file)
    {
        $fp = fopen($file, 'rb');

        $offset = strlen(TraceLogProcess::LOG_END_FLAG);

        fseek($fp, -1 * $offset, SEEK_END);

        $bool = fgets($fp, $offset + 1) == TraceLogProcess::LOG_END_FLAG;

        fclose($fp);

        return $bool;
    }

    private function read($file)
    {
        $lineNo  = 0;
        $matched = false;

        $process = new TraceLogProcess($this->stackDepth);

        $fp = fopen($file, "r");

        while (!feof($fp)) {
            if ($lineNo > 0) {
                $lineNo++;
            }

            $line = trim(fgets($fp));

            if ($line == TraceLogProcess::LOG_START_FLAG) {
                $lineNo = 1;
                continue;
            }


            if ($lineNo == 2) {
                echo $line . "\n";

                if ($this->trace && $this->traceRoute && !$matched && strpos($line, $this->trace)) {
                    $matched = true;
                }

                continue;
            }

            $match = false;

            if ($this->trace && !$this->traceRoute) {
                $match = strpos($line, $this->trace);
                if (!$matched && $match) {
                    $matched = true;
                }
            }

            try {
                $process->run($line, $match);
            } catch (Exception $e) {
                echo $e->getMessage();
            }
        }

        $process->clearAllFunctionPoint();

        fclose($fp);

        return $matched;
    }

    private function mvLog($filename)
    {
        rename($this->logDir . $filename, $this->processedLogDir . $filename);
    }
}

class Logger
{
    public static function cmd($log)
    {
        echo "[Deliverer] " . $log . "\n";
    }

    public static function success($log)
    {
        printf("\e[32m%s\e[0m\n", $log);
    }

    public static function warning($log)
    {
        printf("\e[31m%s\e[0m\n", $log);
    }
}

class EnvCheck
{
    private $popenEnable = true;

    public function __construct()
    {
        $disabled = explode(',', ini_get('disable_functions'));
        $cmd      = "popen";

        foreach ($disabled as $key => $value) {
            if (strlen(trim($value)) == 0) {
                unset($disabled[$key]);
            }
        }

        if (!empty($disabled) && in_array($cmd, $disabled)) {
            Logger::cmd("popen is disabled.");
            Logger::cmd("if you want to check php env by deliverer, you can edit the php.ini and remove popen from disable_functions.");
            Logger::cmd("where is php.ini ? run it in shell: \e[32m php -i|grep php.ini\e[0m\n");
            $this->popenEnable = false;
        }
    }

    public function run()
    {
        if (!$this->popenEnable) {
            return;
        }

        $isRunning = $this->fpmIsRunning();

        if (!$isRunning) {
            return;
        }

        $fpmPath = $this->getFpmPath();

        $this->phpVersion($fpmPath);
        $this->delivererCheck($fpmPath);
    }

    /**
     * # ps -ef|grep php-fpm|grep "master process"|grep -v grep
     * root     17593     1  0 Jul05 ?        00:00:00 php-fpm: master process (/data/local/php72/etc/php-fpm.conf)
     * root     21769     1  0 02:00 ?        00:00:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)
     * root     25468     1  0 14:07 ?        00:00:00 php-fpm: master process (/usr/local/php5/etc/php-fpm.conf)
     * @return bool
     */
    private function fpmIsRunning()
    {
        $cmd = "ps -ef|grep php-fpm|grep \"master process\"|grep -v grep";

        Logger::cmd($cmd);

        $res = $this->exe($cmd);

        if ($res) {
            Logger::success($res);
            return true;
        }

        Logger::warning("no php-fpm process is running.");
        return false;
    }

    private function getFpmPath()
    {
        $cmd = "ps -ef|grep php-fpm|grep \"master process\"|grep -v grep|awk '{print \"sudo ls -al /proc/\"$2}'|sh|grep exe|awk -F \"-> \" '{print $2}'";

        Logger::cmd($cmd);

        $res = $this->exe($cmd);

        if ($res) {
            Logger::success($res);
            return $res;
        }

        Logger::warning("no php-fpm process is running.");
        return "";
    }

    /**
     *
     * /data/local/php72/sbin/php-fpm
     * /usr/local/php/sbin/php-fpm
     * /usr/local/php5/sbin/php-fpm
     *
     * @param $fpmPath
     */
    private function delivererCheck($fpmPath)
    {
        $tmp = explode("\n", $fpmPath);
        foreach ($tmp as $fpmBin) {
            $cmd = trim($fpmBin) . " -m|grep deliverer";
            Logger::cmd($cmd);
            $res = $this->exe($cmd);
            if ($res) {
                Logger::success(trim($fpmBin) . " deliverer has been installed.");
            } else {
                Logger::warning(trim($fpmBin) . " deliverer not installed.");
            }
        }
    }

    private function phpVersion($fpmPath)
    {
        $tmp = explode("\n", $fpmPath);
        foreach ($tmp as $fpmBin) {
            $cmd = trim($fpmBin) . " -v";
            Logger::cmd($cmd);
            $res = $this->exe($cmd);
            Logger::success($res);
        }
    }

    private function exe($cmd)
    {
        $fp  = popen($cmd, "r");
        $res = stream_get_contents($fp);
        $res = trim($res);
        fclose($fp);
        return $res;
    }
}

/**
 * Class PhpFunction
 *
 * 1624285659059375|0x7fd8c5c1db30|0x7fd8c5c1da50|DbConnection::execute|/xxx/library/mysql/DbConnection.php|122
 */
class PhpFunction
{
    public $startTime;
    public $point;
    public $prevPoint;
    public $method;
    public $file;
    public $line;
    public $level;
    public $useTime;
    public $hiddenNum = 0;
    /**
     * @var int
     *
     * 1 真实命中
     * 2 子调用命中（用于真实命中未能显示的情况）
     */
    public $status = 0;


    public function __construct($line)
    {
        $data = explode("|", $line);

        if (count($data) != 6) {
            throw new RuntimeException(sprintf("error data: %s %s\n", $line, json_encode($data)));
        }

        $this->startTime = $data[0];
        $this->point     = $data[1];
        $this->prevPoint = $data[2];
        $this->method    = $data[3];
        $this->file      = $data[4];
        $this->line      = $data[5];
    }
}

class TraceLogProcess
{
    /**
     * @var PhpFunction[]
     */
    private $stack = [];

    private $stackMaxDepth;

    private $stackCurrentDepth = 0;

    private $stackRootPoint;

    /**
     * @var PhpFunction
     */
    private $currentFunction;

    const LOG_START_FLAG = "---";

    const LOG_END_FLAG = "---end---";

    /**
     * @var []
     */
    private static $allFunctionPoint;

    public function addFunctionPoint($point)
    {
        if (empty(self::$allFunctionPoint)) {
            self::$allFunctionPoint[] = $point;
            return;
        }
        if (!in_array($point, self::$allFunctionPoint)) {
            self::$allFunctionPoint[] = $point;
        }
    }

    public function clearAllFunctionPoint()
    {
        self::$allFunctionPoint = [];
    }

    /**
     * Process constructor.
     *
     * @param int    $stackMaxDepth
     * @param string $stackRootPoint
     */
    public function __construct($stackMaxDepth = 5, $stackRootPoint = "(nil)")
    {
        $this->stackMaxDepth  = $stackMaxDepth;
        $this->stackRootPoint = $stackRootPoint;
    }

    /**
     * @param $line
     * @param $isHit bool 是否匹配命中
     */
    public function run($line, $isHit)
    {
        if (!$line) {
            return;
        }

        if ($line == self::LOG_END_FLAG) {
            $this->popStack();
            return;
        }

        $phpFunction         = new PhpFunction($line);
        $phpFunction->status = $isHit ? 1 : 0;

        $this->pushStack($phpFunction);
    }

    private function pushStack(PhpFunction $function)
    {
        $this->currentFunction = $function;
        $this->addFunctionPoint($function->point);

        if ($function->prevPoint == $this->stackRootPoint) {
            $this->popStack();
        }

        if (empty($this->stack)) {
            $function->level         = 1;
            $this->stackCurrentDepth = $function->level;
            $function->useTime       = 0;
            $this->stack[]           = $function;

            return true;
        }

        $updateLastSameLevelFunctionUseTime = false;

        for ($i = count($this->stack); $i > 0; $i--) {
            $item = $this->stack[$i - 1];

            // 更新最后一个方法（函数）的耗时
            if ($i == count($this->stack) && $function->prevPoint != $item->point) {
                $item->useTime = $function->startTime - $item->startTime;
            }

            // 挂载到前置调用链
            if ($function->prevPoint == $item->point || !in_array($function->prevPoint, self::$allFunctionPoint)) {
                $function->level = $item->level + 1;

                // 如果超出则忽略
                if ($function->level > $this->stackMaxDepth) {
                    $item->hiddenNum++;

                    if ($function->status == 1) $item->status = 2;

                    break;
                }

                $this->stack[] = $function;
                break;
            }

            // 没有找到前置向前遍历
            if (!$updateLastSameLevelFunctionUseTime && $function->point == $item->point) {
                $item->useTime = $function->startTime - $item->startTime;
            }
        }


        if ($function->level > $this->stackCurrentDepth) {
            $this->stackCurrentDepth = $function->level;
        }

        return true;
    }

    public function popStack()
    {
        if (count($this->stack) < 1) {
            return;
        }

        foreach ($this->stack as $function) {
            $this->patchUseTime($function);

            for ($i = $function->level; $i > 1; $i--) {
                echo "│   ";
            }

            $format = "├── [%s ms] %s %s:%s\n";
            if ($function->status == 1) {
                $format = "├── [%s ms] \033[32m%s %s:%s\033[0m\n";
            } elseif ($function->status == 2) {
                $format = "├── [%s ms] \033[31m%s %s:%s\033[0m\n";
            }

            $lastData = $function->line;

            if ($function->hiddenNum > 0) {
                $lastData .= " \033[1;33m(+ " . $function->hiddenNum . ")\033[0m";
            }

            printf($format, (int)$function->useTime / 1000, $function->method, $function->file, $lastData);

            unset($function);
        }

        $this->stack             = [];
        $this->stackCurrentDepth = 0;
    }

    private function patchUseTime(PhpFunction $function)
    {
        if ($function->useTime > 0) {
            return;
        }

        $function->useTime = $this->currentFunction->startTime - $function->startTime;
    }
}